#+title: OS - A Nightly Study...!

* Bases
* Operating Systems Principles
** Process
** Thread
** Scheduling
** Mutex
** Semaphores
** CPU Utilization
* Linux
** Directories and Files
** Privliges
** Absolute and Relative Paths
** Linux Commands and the Shell
* RTOS
** Real-Time OS
A real-time operating system should be:
- Event driven
- Deteministic
- Resource constrained
  - Clock speed
  - Memory
  - Energy consumption

There are two types of real time operating systems, the first one is a soft *real-time response*:
- Deteministic
- Predictable
- Non-critical
- Acceptable if deadline is missed
- Examples
  - Video streaming
  - online gaming
  - sensor reading

The other one is a so called *Hard real-time response*:
- Deteministic
- Predictable
- Critical
- Fatal system id deadline is not met
- Examples
  - Aerospace
  - Medical
  - Car-driving applications

A RTOS needs to guarantee deadlines of tasks to work properly. With this it needs to avoid software that takes a lot of CPU time.

In general, RTOS does not have a graphical interface, because it takes too much CPU time.

It uses a priority based scheduling (With round Robin)

When a task is blocked in a real time operating systemw we can have a priority invercion:

    [[./images/pio1.png]]

    If process p blocks process q, then q runs with priority!

    [[./images/pio2.png]]

** FreeRTOS
- FreeRTOS is written mainly in C with several parts in assembly
- The code is easy to read and the functions are close to POSIX threads
- A blinking example for two threads is given below

  The different states are defined here:

  [[./images/fos.png]]

  The task priorities can be changed in a FreeRTOS project, each task is assigned a priority from 0 (~configMAX_PRIORITIES - 1~) where ~configMAX_PRIORITIES~ is defined within =FreeRTOSConfig.h=.

  FreeRTOS also supports semaphores and mutexses.
